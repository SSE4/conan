# Conan automatically generated toolchain file
# DO NOT EDIT MANUALLY, it will be overwritten

# Avoid including toolchain file several times (bad if appending to variables like
#   CMAKE_CXX_FLAGS. See https://github.com/android/ndk/issues/323
if(CONAN_TOOLCHAIN_INCLUDED)
  return()
endif()
set(CONAN_TOOLCHAIN_INCLUDED TRUE)


{%- if base_toolchain %}
include({{base_toolchain}})
{%- endif %}

# Configure
{%- if generator_platform %}
set(CMAKE_GENERATOR_PLATFORM "{{ generator_platform }}" CACHE STRING "" FORCE)
{%- endif %}
{%- if toolset %}
set(CMAKE_GENERATOR_TOOLSET "{{ toolset }}" CACHE STRING "" FORCE)
{%- endif %}

# build_type (Release, Debug, etc) is only defined for single-config generators
{%- if build_type %}
set(CMAKE_BUILD_TYPE "{{ build_type }}" CACHE STRING "Choose the type of build." FORCE)
{%- endif %}

get_property( _CMAKE_IN_TRY_COMPILE GLOBAL PROPERTY IN_TRY_COMPILE )
if(_CMAKE_IN_TRY_COMPILE)
    message(STATUS "Running toolchain IN_TRY_COMPILE")
    return()
endif()

message("Using Conan toolchain through ${CMAKE_TOOLCHAIN_FILE}.")

if(CMAKE_VERSION VERSION_LESS "3.15")
    message(WARNING
        " CMake version less than 3.15 doesn't support CMAKE_PROJECT_INCLUDE variable\\n"
        " used by Conan toolchain to work. In order to get the same behavior you will\\n"
        " need to manually include the generated file after your 'project()' call in the\\n"
        " main CMakeLists.txt file:\\n"
        " \\n"
        "     project(YourProject C CXX)\\n"
        "     include(\\"\\${CMAKE_BINARY_DIR}/conan_project_include.cmake\\")\\n"
        " \\n"
        " This file contains some definitions and extra adjustments that depend on\\n"
        " the build_type and it cannot be done in the toolchain.")
else()
    # Will be executed after the 'project()' command
    set(CMAKE_PROJECT_INCLUDE "{{ conan_project_include_cmake }}")
endif()

# We are going to adjust automagically many things as requested by Conan
#   these are the things done by 'conan_basic_setup()'
set(CMAKE_EXPORT_NO_PACKAGE_REGISTRY ON)

# To support the cmake_find_package generators
{% if cmake_module_path -%}
set(CMAKE_MODULE_PATH {{ cmake_module_path }} ${CMAKE_MODULE_PATH})
{%- endif %}
{% if cmake_prefix_path -%}
set(CMAKE_PREFIX_PATH {{ cmake_prefix_path }} ${CMAKE_PREFIX_PATH})
{%- endif %}

# shared libs
{% if shared_libs -%}
message(STATUS "Conan toolchain: Setting BUILD_SHARED_LIBS= {{ shared_libs }}")
set(BUILD_SHARED_LIBS {{ shared_libs }})
{%- endif %}

# fPIC
{% if fpic -%}
message(STATUS "Conan toolchain: Setting CMAKE_POSITION_INDEPENDENT_CODE=ON (options.fPIC)")
set(CMAKE_POSITION_INDEPENDENT_CODE ON)
{%- endif %}

# SKIP_RPATH
{% if skip_rpath -%}
set(CMAKE_SKIP_RPATH 1 CACHE BOOL "rpaths" FORCE)
# Policy CMP0068
# We want the old behavior, in CMake >= 3.9 CMAKE_SKIP_RPATH won't affect install_name in OSX
set(CMAKE_INSTALL_NAME_DIR "")
{% endif -%}

# Parallel builds
{% if parallel -%}
set(CONAN_CXX_FLAGS "${CONAN_CXX_FLAGS} {{ parallel }}")
set(CONAN_C_FLAGS "${CONAN_C_FLAGS} {{ parallel }}")
{%- endif %}

# Architecture
{% if architecture -%}
set(CONAN_CXX_FLAGS "${CONAN_CXX_FLAGS} {{ architecture }}")
set(CONAN_C_FLAGS "${CONAN_C_FLAGS} {{ architecture }}")
set(CONAN_SHARED_LINKER_FLAGS "${CONAN_SHARED_LINKER_FLAGS} {{ architecture }}")
set(CONAN_EXE_LINKER_FLAGS "${CONAN_EXE_LINKER_FLAGS} {{ architecture }}")
{%- endif %}

# C++ Standard Library
{% if set_libcxx -%}
set(CONAN_CXX_FLAGS "${CONAN_CXX_FLAGS} {{ set_libcxx }}")
{%- endif %}
{% if glibcxx -%}
add_definitions(-D_GLIBCXX_USE_CXX11_ABI={{ glibcxx }})
{%- endif %}

# C++ Standard
{% if cppstd -%}
message(STATUS "Conan C++ Standard {{ cppstd }} with extensions {{ cppstd_extensions }}}")
set(CMAKE_CXX_STANDARD {{ cppstd }})
set(CMAKE_CXX_EXTENSIONS {{ cppstd_extensions }})
{%- endif %}

# Install prefix
{% if install_prefix -%}
set(CMAKE_INSTALL_PREFIX "{{install_prefix}}" CACHE STRING "" FORCE)
{%- endif %}

# Variables
{% for it, value in variables.items() -%}
set({{ it }} "{{ value }}")
{% endfor %}
# Variables  per configuration
{% for it, values in variables_config.items() -%}
    {%- set genexpr = namespace(str='') %}
    {%- for conf, value in values -%}
        {%- set genexpr.str = genexpr.str +
                              '$<IF:$<CONFIG:' + conf + '>,"' + value|string + '",' %}
        {%- if loop.last %}{% set genexpr.str = genexpr.str + '""' -%}{%- endif -%}
    {%- endfor -%}
    {% for i in range(values|count) %}{%- set genexpr.str = genexpr.str + '>' %}
    {%- endfor -%}
set({{ it }} {{ genexpr.str }})
{% endfor %}

# Preprocessor definitions
{% for it, value in preprocessor_definitions.items() -%}
# add_compile_definitions only works in cmake >= 3.12
add_definitions(-D{{ it }}="{{ value }}")
{% endfor %}
# Preprocessor definitions per configuration
{% for it, values in preprocessor_definitions_config.items() -%}
    {%- set genexpr = namespace(str='') %}
    {%- for conf, value in values -%}
        {%- set genexpr.str = genexpr.str +
                              '$<IF:$<CONFIG:' + conf + '>,"' + value|string + '",' %}
        {%- if loop.last %}{% set genexpr.str = genexpr.str + '""' -%}{%- endif -%}
    {%- endfor -%}
    {% for i in range(values|count) %}{%- set genexpr.str = genexpr.str + '>' %}
    {%- endfor -%}
add_definitions(-D{{ it }}={{ genexpr.str }})
{% endfor %}


set(CMAKE_CXX_FLAGS_INIT "${CONAN_CXX_FLAGS}" CACHE STRING "" FORCE)
set(CMAKE_C_FLAGS_INIT "${CONAN_C_FLAGS}" CACHE STRING "" FORCE)
set(CMAKE_SHARED_LINKER_FLAGS_INIT "${CONAN_SHARED_LINKER_FLAGS}" CACHE STRING "" FORCE)
set(CMAKE_EXE_LINKER_FLAGS_INIT "${CONAN_EXE_LINKER_FLAGS}" CACHE STRING "" FORCE)
